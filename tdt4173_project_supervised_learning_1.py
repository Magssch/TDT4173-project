# -*- coding: utf-8 -*-
"""tdt4173-project-supervised-learning-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OK7__R9blnImox_gjT5j1hjSybb3T1zC
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import re
import random
import warnings

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.neighbors import KNeighborsClassifier

train = pd.read_csv("/kaggle/input/60k-stack-overflow-questions-with-quality-rate/train.csv")
valid = pd.read_csv("/kaggle/input/60k-stack-overflow-questions-with-quality-rate/valid.csv")
data = pd.concat([train,valid], keys=["Id", "Title", "Body", "Tags", "CreationDate", "Y"])

data=data.drop(['Id', 'CreationDate'], axis=1)
data['Y']=data['Y'].map({'LQ_CLOSE':0, 'LQ_EDIT':1, 'HQ':2})
data.head()

labels = ['Open Questions', 'Low Quality Question - Close', 'Low Quality Question - Edit']
values = [len(data[data['Y'] == 2]), len(data[data['Y'] == 0]), len(data[data['Y'] == 1])]
plt.style.use('classic')
plt.figure(figsize=(16, 9))
plt.pie(x=values, labels=labels, autopct="%1.1f%%")
plt.title("Target Value Distribution")
plt.show()

def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^(a-zA-Z)\s]','', text)
    return text
data['Body'] = data['Body'].apply(clean_text)
data['Title'] = data['Title'].apply(clean_text)
data['Tags'] = data['Tags'].apply(clean_text)
data.head()

# Function to return training and validation sets based on k-fold cross validation
# n defines the iteration number (n>0 and n<=k)
def k_fold_datasets_body(n,k=10,data=data):
    assert n>0
    size = len(data)
    lower = int(size/k)*(n-1)
    upper = int(size/k)*n

    # Training Sets
    train = data[:lower]+data[upper:]
    trainX = train['Body']
    trainY = train['Y'].values

    # Validation Sets
    valid = data[lower:upper]
    validX = valid['Body']
    validY = valid['Y'].values

    assert trainX.shape == trainY.shape
    assert validX.shape == validY.shape
    
    return trainX, trainY, validX, validY

trainX, trainY, validX, validY = k_fold_datasets_body(1)

vectorizer = TfidfVectorizer()
trainX = vectorizer.fit_transform(trainX.apply(lambda x: np.str_(x)))
validX = vectorizer.transform(validX)